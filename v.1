clear
dato_lupa = input('\nSeleccione el dato con el que cuenta de su lupa: \n1. Aumento \n2. Dioptrias \n3. No conoce ninguno de los datos o conoce la distancia focal de las lentes \n4. Aumento especifico \n5. Salir\n');

while dato_lupa ~= 5

    switch dato_lupa
        case 1
            % Transformado de aumento a distancia focal
            aumento_lente_1 = input('\nIngrese el aumento de la lente 1: ');
            aumento_lente_2 = input('\nIngrese el aumento de la lente 2: ');
            distancia_focal_lente_1 = 1000/((aumento_lente_1 - 1)*4);
            distancia_focal_lente_2 = 1000/((aumento_lente_2 - 1)*4);

            distancia_entre_lentes =  distancia_focal_lente_1 +  distancia_focal_lente_2;

            fprintf('\nLa distancia a la que se colocaran las lentes sera de: %.2f[mm]\n', distancia_entre_lentes)

            dato_lupa = input('\nSeleccione el dato con el que cuenta de su lupa: \n1. Aumento \n2. Dioptrias \n3. No conoce ninguno de los datos o conoce la distancia focal de las lentes \n4. Aumento especifico \n5. Salir y generar gráfico \n');

            if distancia_focal_lente_1 < distancia_focal_lente_2

                    temp_distancia_focal = distancia_focal_lente_1;
                    distancia_focal_lente_1 = distancia_focal_lente_2;
                    distancia_focal_lente_2 = temp_distancia_focal;
            end

            aumento_telescopio = distancia_focal_lente_1/distancia_focal_lente_2;

            %Mensaje
            uiwait(msgbox({['Distancia entre lentes: ' num2str(distancia_entre_lentes) '[mm]                 '];['Distancia focal de la lente 1: ' num2str(distancia_focal_lente_1) '[mm]'] ; ['Distancia focal de la lente 2: ' num2str(distancia_focal_lente_2) '[mm]' ]; ['Posición de la imagen: Invertida' ''] ; ['Aumento del telescopio: ' num2str(aumento_telescopio) 'X']} ,"Ficha técnica del telescopio"));
    
        case 2
            % Transformado de dioptria a distancia focal
            dioptria_lente_1 = input('\nIngrese la dioptria de la lente 1: ');
            dioptria_lente_2 = input('\nIngrese la dioptria de la lente 2: ');
            distancia_focal_lente_1= 1000/(dioptria_lente_1);
            distancia_focal_lente_2 = 1000/(dioptria_lente_2);

            distancia_entre_lentes =  distancia_focal_lente_1 +  distancia_focal_lente_2;

            fprintf('\nLa distancia a la que se colocaran las lentes sera de: %.2f: ', distancia_entre_lentes)

            dato_lupa = input('\nSeleccione el dato con el que cuenta de su lupa: \n1. Aumento \n2. Dioptrias \n3. No conoce ninguno de los datos o conoce la distancia focal de las lentes \n4. Aumento especifico \n5. Salir y generar gráfico \n');
            if distancia_focal_lente_1 < distancia_focal_lente_2

                    temp_distancia_focal = distancia_focal_lente_1;
                    distancia_focal_lente_1 = distancia_focal_lente_2;
                    distancia_focal_lente_2 = temp_distancia_focal;
            end

            aumento_telescopio = distancia_focal_lente_1/distancia_focal_lente_2;

            %Mensaje
            uiwait(msgbox({['Distancia entre lentes: ' num2str(distancia_entre_lentes) '[mm]'];['Distancia focal de la lente 1: ' num2str(distancia_focal_lente_1) '[mm]'] ; ['Distancia focal de la lente 2: ' num2str(distancia_focal_lente_2) '[mm]']; ['Posición de la imagen: Invertida' ''] ; ['Aumento del telescopio: ' num2str(aumento_telescopio) 'X']} ,"Ficha técnica del telescopio"));
    
        case 3
            % En caso de que no se tenga ningún dato
            fprintf(['\nYa que para la configuración del telescopio se necesitan las distancias focales de las lupas que utilizará,' ...
            '\nse recomienda seguir estos pasos para calcular un aproximado de la distancia focal: ']);
            fprintf(['\n1. Buscar un cuarto oscuro para hacer la mejor aproximación. \n2. Con una luz, como por ejemplo la de su celular, la hará incidir sobre la lupa. ' ...
            '\n3. Buscar la formación de un punto de luz, este debe ser lo más nítido posible. \n4. Una vez consiguiendo el punto, mida la distancia de la lupa hasta la superficie donde se enfocó la luz y esa será la distancia\nfocal de la lupa.\n']);
            distancia_focal_lente_1 = input('\nIngrese el dato de la distancia focal de la lente 1: ');
            distancia_focal_lente_2 = input('\nIngrese el dato de la distancia focal de la lente 2: ');
            
             %Calculando la distancia focal

            distancia_entre_lentes =  distancia_focal_lente_1 +  distancia_focal_lente_2;

            fprintf('\nLa distancia a la que se colocaran las lentes sera de: %.2f[mm]\n ', distancia_entre_lentes)
            
            dato_lupa = input('\nSeleccione el dato con el que cuenta de su lupa: \n1. Aumento \n2. Dioptrias \n3. No conoce ninguno de los datos o conoce la distancia focal de las lentes \n4. Aumento especifico \n5. Salir y generar gráfico\n');
             if distancia_focal_lente_1 < distancia_focal_lente_2

                    temp_distancia_focal = distancia_focal_lente_1;
                    distancia_focal_lente_1 = distancia_focal_lente_2;
                    distancia_focal_lente_2 = temp_distancia_focal;
            end

            aumento_telescopio = distancia_focal_lente_1/distancia_focal_lente_2;

            %Mensaje
            uiwait(msgbox({['Distancia entre lentes: ' num2str(distancia_entre_lentes) '[mm]'];['Distancia focal de la lente 1: ' num2str(distancia_focal_lente_1) '[mm]' ] ; ['Distancia focal de la lente 2: ' num2str(distancia_focal_lente_2) '[mm]']; ['Posición de la imagen: Invertida' ''] ; ['Aumento del telescopio: ' num2str(aumento_telescopio) 'X']} ,"Ficha técnica del telescopio"));
    
        case 4
    
            aumento_deseado = input('\nIngrese cuantos aumentos desea obtener: ');
            %con distancia focal
             fprintf('\nDiferentes medidas de distancias focales en [mm] para obtener el aumento deseado de %dX:\n\n', aumento_deseado);
             for objetivo = 1:aumento_deseado + 10
                ocular = objetivo / aumento_deseado;
                fprintf('Objetivo: %d, Ocular: %.2f\n', objetivo, ocular);
             end
            %sumando aumentos
            fprintf('\nDiferentes propuestas de aumentos para lentes y asi obtener el aumento deseado de %dX:\n\n', aumento_deseado);
    
            for Objetivo_2 = 1:aumento_deseado
                Ocular_2 = aumento_deseado / Objetivo_2;
                fprintf('Objetivo: %d, Ocular: %.2f\n', Objetivo_2, Ocular_2);
            end
            %sumando aumentos
            fprintf('\nDiferentes propuestas de dioptrias para lentes y asi obtener el aumento deseado de %dX:\n\n', aumento_deseado);
    
            for Objetivo_3 = 2:aumento_deseado - 1
                Ocular_3 = aumento_deseado / Objetivo_3;
                fprintf('Objetivo (Dioptrias): %d, Ocular (Dioptrias): %.2f\n', (Objetivo_3-1)*4, (Ocular_3-1)*4);
            end
            dato_lupa = input('\nSeleccione el dato con el que cuenta de su lupa: \n1. Aumento \n2. Dioptrias \n3. No conoce ninguno de los datos o conoce la distancia focal de las lentes \n4. Aumento especifico\n');
           
           

        case 5
                fprintf('\nsalio');

        otherwise
                fprintf('\nNo se puede calcular, consultar con los programadores');

    end

    % Asegurarse de que el primer lente tenga la mayor distancia focal
if distancia_focal_lente_1 < distancia_focal_lente_2
    temp_distancia_focal = distancia_focal_lente_1;
    distancia_focal_lente_1 = distancia_focal_lente_2;
    distancia_focal_lente_2 = temp_distancia_focal;
end

% Calculando la distancia entre lentes
distancia_entre_lentes = distancia_focal_lente_1 + distancia_focal_lente_2;

% Gráfico
x1 = 0;
y1_inicial = 0;
x2 = 20 + (distancia_entre_lentes*0.01);
y2_inicial = y1_inicial;


ancho = 4;
altura = 10;

figure;
axis off;
hold on;

% Círculo
radio = 5;
centro_circulo = [-20, y1_inicial+altura/2];
viscircles(centro_circulo, radio, 'Color', 'black');

% Círculo derecho (más pequeño)
radio2 = altura/4;
centro_circulo2 = [x2+radio2+10, y2_inicial+altura/2];
viscircles(centro_circulo2, radio2, 'Color', [0 0.5 1]);

% Rectángulos
rectangle('Position', [x1, y1_inicial, ancho, altura], 'FaceColor', [0.4 0.7 1], 'EdgeColor', [0.4 0.7 1],'Curvature',[0.7,1]);
rectangle('Position', [x2, y2_inicial, ancho, altura-1], 'FaceColor', [0.4 0.7 1], 'EdgeColor', [0.4 0.7 1],'Curvature',[0.7,1]);
axis([x1-15 x2+ancho+5 y1_inicial-1 altura+1]);

% Etiquetas de distancia focal y distancia entre lentes
text(x1+ancho/2, y1_inicial+altura+1, sprintf('Objetivo. \nDistancia focal 1: \n%.2f[mm]', distancia_focal_lente_1), 'HorizontalAlignment', 'center');

text(x2+ancho/2, y2_inicial+altura+1, sprintf('Ocular. \nDistancia focal 2: \n%.2f[mm]', distancia_focal_lente_2), 'HorizontalAlignment', 'center');

text((x1+ancho+x2)/2, (y1_inicial+altura+y2_inicial)/2 + 1.5, sprintf('Distancia entre \nlentes: %.2f[mm]', distancia_entre_lentes), 'HorizontalAlignment', 'center');

text((x1+ancho+x2)/2, (y1_inicial) + 1.5, sprintf('La imagen observada\nserá virtual\n(Invertida)'),'HorizontalAlignment', 'center');




% Etiqueta del círculo
text(centro_circulo(1), -1.3, 'Objeto', 'HorizontalAlignment', 'center');

text(centro_circulo2(1), -0.05, 'Observador', 'HorizontalAlignment', 'center');


% Parámetros de la animación
num_lineas = 5;              % Número de rectas que representan la incidencia de la luz
espacio_lineas = altura / (num_lineas + 1);
long_linea = ancho * 3;
retardo_animacion = 0.3;      % Retardo entre cada paso de la animación (más lento)

% Animación del círculo
for i = 1:num_lineas
    radio = altura/2 * (i/num_lineas);
    viscircles(centro_circulo, radio, 'Color', 'black');
    pause(retardo_animacion);
end

% Animación de las líneas que representan la incidencia de la luz
line([centro_circulo(1)+radio-3, x1], [y1_inicial, y1_inicial], 'Color', [0.3010 0.7450 0.9330], 'LineWidth', 2);
    pause(retardo_animacion);
for i = 1:num_lineas
    line([centro_circulo(1)+radio, x1], [y1_inicial+espacio_lineas*i, y1_inicial+espacio_lineas*i], 'Color', [0.3010 0.7450 0.9330], 'LineWidth', 2);
    pause(retardo_animacion);
end
line([centro_circulo(1)+radio-3, x1], [y1_inicial+espacio_lineas*6, y1_inicial+espacio_lineas*6], 'Color', [0.3010 0.7450 0.9330], 'LineWidth', 2);
    pause(retardo_animacion);

% Animación de la línea que representa la distancia entre lentes
line([x1+ancho, x2], [y1_inicial+altura/2, y2_inicial+altura/2], 'Color', [0.8500 0.3250 0.0980]', 'LineStyle', '--', 'LineWidth', 2);

hold off;

        
end
